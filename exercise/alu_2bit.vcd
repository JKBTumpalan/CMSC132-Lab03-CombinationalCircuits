$date
  Sun Oct  4 11:26:55 2020
$end
$version
  GHDL v0
$end
$timescale
  1 fs
$end
$scope module standard $end
$upscope $end
$scope module std_logic_1164 $end
$upscope $end
$scope module numeric_std $end
$upscope $end
$scope module alu_2bit_tb $end
$var reg 7 ! input[0:6] $end
$var reg 2 " res[0:1] $end
$var reg 1 # cout $end
$scope module uut $end
$var reg 2 $ input_i[0:1] $end
$var reg 2 % input_j[0:1] $end
$var reg 3 & operation[0:2] $end
$var reg 2 ' output_k[0:1] $end
$var reg 1 ( c_out $end
$var reg 2 ) and_signal[0:1] $end
$var reg 2 * xor_signal[0:1] $end
$var reg 2 + or_signal[0:1] $end
$var reg 2 , not_signal[0:1] $end
$var reg 2 - addition_signal[0:1] $end
$var reg 2 . fs_1s_complement[0:1] $end
$var reg 2 / fs_2s_complement[0:1] $end
$var reg 2 0 inc_signal[0:1] $end
$var reg 2 1 fs_subtrahend_complement[0:1] $end
$var reg 2 2 fs_borrowout[0:1] $end
$var reg 2 3 fs_difference[0:1] $end
$var reg 2 4 fs_difference2[0:1] $end
$var reg 2 5 noinput[0:1] $end
$var reg 2 6 incinput[0:1] $end
$scope module and_op $end
$var reg 2 7 a[0:1] $end
$var reg 2 8 b[0:1] $end
$var reg 2 9 c[0:1] $end
$upscope $end
$scope module xor_op $end
$var reg 2 : a[0:1] $end
$var reg 2 ; b[0:1] $end
$var reg 2 < c[0:1] $end
$upscope $end
$scope module or_op $end
$var reg 2 = a[0:1] $end
$var reg 2 > b[0:1] $end
$var reg 2 ? c[0:1] $end
$upscope $end
$scope module not_op $end
$var reg 2 @ a[0:1] $end
$var reg 2 A b[0:1] $end
$upscope $end
$scope module fa_2bit_op $end
$var reg 2 B a[0:1] $end
$var reg 2 C b[0:1] $end
$var reg 2 D result[0:1] $end
$var reg 1 E carry_out $end
$var reg 1 F carryout1 $end
$var reg 1 G noinput $end
$scope module full_adder2 $end
$var reg 1 H a $end
$var reg 1 I b $end
$var reg 1 J carryin $end
$var reg 1 K sum $end
$var reg 1 L carryout $end
$upscope $end
$scope module full_adder1 $end
$var reg 1 M a $end
$var reg 1 N b $end
$var reg 1 O carryin $end
$var reg 1 P sum $end
$var reg 1 Q carryout $end
$upscope $end
$upscope $end
$scope module increment_op $end
$var reg 2 R a[0:1] $end
$var reg 2 S b[0:1] $end
$var reg 2 T result[0:1] $end
$var reg 1 U carry_out $end
$var reg 1 V carryout1 $end
$var reg 1 W noinput $end
$scope module full_adder2 $end
$var reg 1 X a $end
$var reg 1 Y b $end
$var reg 1 Z carryin $end
$var reg 1 [ sum $end
$var reg 1 \ carryout $end
$upscope $end
$scope module full_adder1 $end
$var reg 1 ] a $end
$var reg 1 ^ b $end
$var reg 1 _ carryin $end
$var reg 1 ` sum $end
$var reg 1 a carryout $end
$upscope $end
$upscope $end
$scope module fs_subtrahend $end
$var reg 2 b a[0:1] $end
$var reg 2 c b[0:1] $end
$upscope $end
$scope module fs_2bit_1s_complement $end
$var reg 2 d a[0:1] $end
$var reg 2 e b[0:1] $end
$var reg 2 f result[0:1] $end
$var reg 1 g carry_out $end
$var reg 1 h carryout1 $end
$var reg 1 i noinput $end
$scope module full_adder2 $end
$var reg 1 j a $end
$var reg 1 k b $end
$var reg 1 l carryin $end
$var reg 1 m sum $end
$var reg 1 n carryout $end
$upscope $end
$scope module full_adder1 $end
$var reg 1 o a $end
$var reg 1 p b $end
$var reg 1 q carryin $end
$var reg 1 r sum $end
$var reg 1 s carryout $end
$upscope $end
$upscope $end
$scope module fs_2bit_1s_complement_with_carry $end
$var reg 2 t a[0:1] $end
$var reg 2 u b[0:1] $end
$var reg 2 v result[0:1] $end
$var reg 1 w carry_out $end
$var reg 1 x carryout1 $end
$var reg 1 y noinput $end
$scope module full_adder2 $end
$var reg 1 z a $end
$var reg 1 { b $end
$var reg 1 | carryin $end
$var reg 1 } sum $end
$var reg 1 !" carryout $end
$upscope $end
$scope module full_adder1 $end
$var reg 1 "" a $end
$var reg 1 #" b $end
$var reg 1 $" carryin $end
$var reg 1 %" sum $end
$var reg 1 &" carryout $end
$upscope $end
$upscope $end
$scope module fs_2bit_2s_complement $end
$var reg 2 '" a[0:1] $end
$var reg 2 (" b[0:1] $end
$var reg 2 )" result[0:1] $end
$var reg 1 *" carry_out $end
$var reg 1 +" carryout1 $end
$var reg 1 ," noinput $end
$scope module full_adder2 $end
$var reg 1 -" a $end
$var reg 1 ." b $end
$var reg 1 /" carryin $end
$var reg 1 0" sum $end
$var reg 1 1" carryout $end
$upscope $end
$scope module full_adder1 $end
$var reg 1 2" a $end
$var reg 1 3" b $end
$var reg 1 4" carryin $end
$var reg 1 5" sum $end
$var reg 1 6" carryout $end
$upscope $end
$upscope $end
$scope module fs_2bit_2s_complement_plus_1 $end
$var reg 2 7" a[0:1] $end
$var reg 2 8" b[0:1] $end
$var reg 2 9" result[0:1] $end
$var reg 1 :" carry_out $end
$var reg 1 ;" carryout1 $end
$var reg 1 <" noinput $end
$scope module full_adder2 $end
$var reg 1 =" a $end
$var reg 1 >" b $end
$var reg 1 ?" carryin $end
$var reg 1 @" sum $end
$var reg 1 A" carryout $end
$upscope $end
$scope module full_adder1 $end
$var reg 1 B" a $end
$var reg 1 C" b $end
$var reg 1 D" carryin $end
$var reg 1 E" sum $end
$var reg 1 F" carryout $end
$upscope $end
$upscope $end
$scope module main_mux $end
$var reg 2 G" a[0:1] $end
$var reg 2 H" b[0:1] $end
$var reg 2 I" c[0:1] $end
$var reg 2 J" d[0:1] $end
$var reg 2 K" e[0:1] $end
$var reg 2 L" f[0:1] $end
$var reg 2 M" g[0:1] $end
$var reg 2 N" h[0:1] $end
$var reg 3 O" s[0:2] $end
$var reg 2 P" alu_result[0:1] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
b0001011 !
b10 "
X#
b10 $
b11 %
b000 &
b10 '
X(
b10 )
b01 *
b11 +
b01 ,
b01 -
b10 .
b11 /
b11 0
b00 1
b00 2
b10 3
b10 4
b01 5
b01 6
b10 7
b11 8
b10 9
b10 :
b11 ;
b01 <
b10 =
b11 >
b11 ?
b10 @
b01 A
b10 B
b11 C
b01 D
XE
0F
0G
0H
1I
0J
1K
0L
1M
1N
0O
0P
XQ
b10 R
b01 S
b11 T
XU
0V
0W
0X
1Y
0Z
1[
0\
1]
0^
0_
1`
Xa
b11 b
b00 c
b10 d
b00 e
b10 f
0g
0h
0i
0j
0k
0l
0m
0n
1o
0p
0q
1r
0s
b10 t
b00 u
b10 v
Xw
0x
0y
0z
0{
0|
0}
0!"
1""
0#"
0$"
1%"
X&"
b10 '"
b00 ("
b10 )"
0*"
0+"
0,"
0-"
0."
0/"
00"
01"
12"
03"
04"
15"
06"
b10 7"
b01 8"
b11 9"
X:"
0;"
0<"
0="
1>"
0?"
1@"
0A"
1B"
0C"
0D"
1E"
XF"
b10 G"
b11 H"
b01 I"
b01 J"
b01 K"
b10 L"
b11 M"
b11 N"
b000 O"
b10 P"
#10000000
b0011011 !
b11 "
b001 &
b11 '
b001 O"
b11 P"
#20000000
b0101011 !
b01 "
b010 &
b01 '
b010 O"
b01 P"
#30000000
b0111011 !
b011 &
b011 O"
#40000000
b1001011 !
b100 &
b100 O"
#50000000
b1011011 !
b10 "
b101 &
b10 '
b101 O"
b10 P"
#60000000
b1101011 !
b11 "
b110 &
b11 '
b110 O"
b11 P"
#70000000
b1111011 !
b111 &
b111 O"
#80000000
